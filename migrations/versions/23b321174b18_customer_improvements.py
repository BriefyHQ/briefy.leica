"""Customer improvements.

Revision ID: 23b321174b18
Revises: 4ab62c901d68
Create Date: 2016-12-05 12:26:01.807299
"""
from alembic import op
from briefy.common.db.types.aware_datetime import AwareDateTime
from briefy.leica.vocabularies import ContactTypes
from sqlalchemy_utils.types.country import CountryType
from sqlalchemy_utils.types.uuid import UUIDType

import briefy.common
import sqlalchemy as sa
import sqlalchemy_utils

revision = '23b321174b18'
down_revision = '4ab62c901d68'
branch_labels = None
depends_on = None

# Monkey patch calls for which alembic create bogus parameters:

original_uuid_type = UUIDType


def monkey_uuid_type(*args, length=None, **kw):
    return original_uuid_type(*args, **kw)


UUIDType = monkey_uuid_type

original_timezone_type = sqlalchemy_utils.types.timezone.TimezoneType


def monkey_timezone_type(*args, length=None, **kw):
    return original_timezone_type(*args, **kw)


sqlalchemy_utils.types.timezone.TimezoneType = monkey_timezone_type


def upgrade():
    """Upgrade database model."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('customerbillingaddresses',
                    sa.Column('locality', sa.String(length=255), nullable=False),
                    sa.Column('info', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.Column('country', sqlalchemy_utils.types.country.CountryType(),
                              nullable=False),
                    sa.Column('coordinates', briefy.common.db.types.geo.POINT(), nullable=True),
                    sa.Column('timezone', sqlalchemy_utils.types.timezone.TimezoneType(),
                              nullable=True),
                    sa.Column('id', UUIDType(length=16), nullable=False),
                    sa.Column('created_at', AwareDateTime(), nullable=True),
                    sa.Column('updated_at', AwareDateTime(), nullable=True),
                    sa.Column('state', sa.String(length=100), nullable=True),
                    sa.Column('state_history', sqlalchemy_utils.types.json.JSONType(),
                              nullable=True),
                    sa.Column('customer_id', UUIDType(length=16), nullable=True),
                    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id')
                    )
    op.create_table('customercontacts',
                    sa.Column('id', UUIDType(length=16), nullable=False),
                    sa.Column('title', sa.String(), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('slug', sa.String(length=255), nullable=True),
                    sa.Column('first_name', sa.String(length=255), nullable=False),
                    sa.Column('last_name', sa.String(length=255), nullable=False),
                    sa.Column('created_at', AwareDateTime(), nullable=True),
                    sa.Column('updated_at', AwareDateTime(), nullable=True),
                    sa.Column('state', sa.String(length=100), nullable=True),
                    sa.Column('state_history', sqlalchemy_utils.types.json.JSONType(),
                              nullable=True),
                    sa.Column('customer_id', UUIDType(length=16), nullable=False),
                    sa.Column(
                        'type', sqlalchemy_utils.types.choice.ChoiceType(ContactTypes),
                        nullable=False
                    ),
                    sa.Column('position', sa.String(length=255), nullable=True),
                    sa.Column('email', sa.String(length=255), nullable=True),
                    sa.Column('mobile', sa.String(length=255), nullable=True),
                    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id')
                    )
    op.create_unique_constraint(None, 'assets', ['id'])
    op.create_unique_constraint(None, 'comments', ['id'])
    op.add_column('customers', sa.Column('legal_name', sa.String(length=255), nullable=True))
    op.add_column('customers', sa.Column('tax_country', CountryType, nullable=True))
    op.add_column('customers', sa.Column('tax_id', sa.String(length=50), nullable=True))
    op.add_column('customers', sa.Column('tax_id_type', sa.String(length=50), nullable=True))
    op.create_unique_constraint(None, 'customers', ['id'])
    op.add_column('customers_version',
                  sa.Column('legal_name', sa.String(length=255), autoincrement=False,
                            nullable=True))
    op.add_column('customers_version',
                  sa.Column('tax_country', CountryType, autoincrement=False, nullable=True))
    op.add_column('customers_version',
                  sa.Column('tax_id', sa.String(length=50), autoincrement=False, nullable=True))
    op.add_column('customers_version',
                  sa.Column('tax_id_type', sa.String(length=50), autoincrement=False,
                            nullable=True))
    op.drop_index('idx_joblocations_coordinates', table_name='joblocations')
    op.create_unique_constraint(None, 'joblocations', ['id'])
    op.alter_column('jobs', 'source',
                    existing_type=sa.VARCHAR(),
                    nullable=False)
    op.create_unique_constraint(None, 'jobs', ['id'])
    op.create_unique_constraint(None, 'links', ['id'])
    op.create_unique_constraint(None, 'professionals', ['id'])
    op.add_column('projects', sa.Column('approval_window', sa.Integer(), nullable=True))
    op.add_column('projects', sa.Column('availability_window', sa.Integer(), nullable=True))
    op.add_column('projects', sa.Column('cancellation_window', sa.Integer(), nullable=True))
    op.add_column('projects',
                  sa.Column('contract', sqlalchemy_utils.types.url.URLType(), nullable=True))
    op.add_column('projects', sa.Column('payout_currency',
                                        sqlalchemy_utils.types.currency.CurrencyType(length=3),
                                        nullable=True))
    op.add_column('projects', sa.Column('payout_value', sa.Integer(), nullable=False))
    op.add_column('projects', sa.Column('price', sa.Integer(), nullable=True))
    op.add_column('projects', sa.Column('price_currency',
                                        sqlalchemy_utils.types.currency.CurrencyType(length=3),
                                        nullable=True))
    op.add_column('projects', sa.Column('release_template', sqlalchemy_utils.types.url.URLType(),
                                        nullable=True))
    op.create_unique_constraint(None, 'projects', ['id'])
    op.add_column('projects_version',
                  sa.Column('approval_window', sa.Integer(), autoincrement=False, nullable=True))
    op.add_column('projects_version',
                  sa.Column('availability_window', sa.Integer(), autoincrement=False,
                            nullable=True))
    op.add_column('projects_version',
                  sa.Column('cancellation_window', sa.Integer(), autoincrement=False,
                            nullable=True))
    op.add_column('projects_version',
                  sa.Column('contract', sqlalchemy_utils.types.url.URLType(), autoincrement=False,
                            nullable=True))
    op.add_column('projects_version', sa.Column('payout_currency',
                                                sqlalchemy_utils.types.currency.CurrencyType(
                                                    length=3), autoincrement=False, nullable=True))
    op.add_column('projects_version',
                  sa.Column('payout_value', sa.Integer(), autoincrement=False, nullable=True))
    op.add_column('projects_version',
                  sa.Column('price', sa.Integer(), autoincrement=False, nullable=True))
    op.add_column('projects_version', sa.Column('price_currency',
                                                sqlalchemy_utils.types.currency.CurrencyType(
                                                    length=3), autoincrement=False, nullable=True))
    op.add_column('projects_version',
                  sa.Column('release_template', sqlalchemy_utils.types.url.URLType(),
                            autoincrement=False, nullable=True))
    op.drop_index('idx_workinglocations_coordinates', table_name='workinglocations')
    op.create_unique_constraint(None, 'workinglocations', ['id'])
    # ### end Alembic commands ###


def downgrade():
    """Downgrade database model."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'workinglocations', type_='unique')
    op.create_index('idx_workinglocations_coordinates', 'workinglocations', ['coordinates'],
                    unique=False)
    op.drop_column('projects_version', 'release_template')
    op.drop_column('projects_version', 'price_currency')
    op.drop_column('projects_version', 'price')
    op.drop_column('projects_version', 'payout_value')
    op.drop_column('projects_version', 'payout_currency')
    op.drop_column('projects_version', 'contract')
    op.drop_column('projects_version', 'cancellation_window')
    op.drop_column('projects_version', 'availability_window')
    op.drop_column('projects_version', 'approval_window')
    op.drop_constraint(None, 'projects', type_='unique')
    op.drop_column('projects', 'release_template')
    op.drop_column('projects', 'price_currency')
    op.drop_column('projects', 'price')
    op.drop_column('projects', 'payout_value')
    op.drop_column('projects', 'payout_currency')
    op.drop_column('projects', 'contract')
    op.drop_column('projects', 'cancellation_window')
    op.drop_column('projects', 'availability_window')
    op.drop_column('projects', 'approval_window')
    op.drop_constraint(None, 'professionals', type_='unique')
    op.drop_constraint(None, 'links', type_='unique')
    op.drop_constraint(None, 'jobs', type_='unique')
    op.alter_column('jobs', 'source',
                    existing_type=sa.VARCHAR(),
                    nullable=True)
    op.drop_constraint(None, 'joblocations', type_='unique')
    op.create_index('idx_joblocations_coordinates', 'joblocations', ['coordinates'], unique=False)
    op.drop_column('customers_version', 'tax_id_type')
    op.drop_column('customers_version', 'tax_id')
    op.drop_column('customers_version', 'tax_country')
    op.drop_column('customers_version', 'legal_name')
    op.drop_constraint(None, 'customers', type_='unique')
    op.drop_column('customers', 'tax_id_type')
    op.drop_column('customers', 'tax_id')
    op.drop_column('customers', 'tax_country')
    op.drop_column('customers', 'legal_name')
    op.drop_constraint(None, 'comments', type_='unique')
    op.drop_constraint(None, 'assets', type_='unique')
    op.drop_table('customercontacts')
    op.drop_table('customerbillingaddresses')
    # ### end Alembic commands ###
